---
import * as interfaces from "../../lib/interfaces.ts";
import { buildHeadingId } from "../../lib/blog-helpers.ts";
import "../../styles/notion-color.css";

export interface Props {
  blocks: interfaces.Block;
}

const buildHeadingId = (heading) =>
  heading.RichTexts.map(
    (richText: interfaces.RichText) => richText.Text.Content
  )
    .join()
    .trim();

const { blocks } = Astro.props;

const istoc = blocks.filter(
  (b: interfaces.Block) => b.Type === "table_of_contents"
);
const headings = blocks.filter(
  (b: interfaces.Block) =>
    b.Type === "heading_1" || b.Type === "heading_2" || b.Type === "heading_3"
);

if (istoc.length === 0) {
  return;
}
---

<nav class="toc-nav">
  {
    headings.map((headingBlock: interfaces.Block) => {
      const heading =
        headingBlock.Heading1 || headingBlock.Heading2 || headingBlock.Heading3;

      let indentClass = "";
      if (headingBlock.Type === "heading_2") {
        indentClass = "indent-1";
      } else if (headingBlock.Type === "heading_3") {
        indentClass = "indent-2";
      }

      return (
        <span>
          <a href={`#${buildHeadingId(heading)}`} class={`${indentClass}`}>
            {heading.RichTexts.map(
              (richText: interfaces.RichText) => richText.PlainText
            ).join("")}
          </a>
        </span>
      );
    })
  }
</nav>

<style>
  .toc-nav {
    position: sticky;
    width: 25%;
    top: 5rem;
    align-self: start;
    padding: 10px 0;
    margin: 3rem 0 5rem;
    border: solid 1px #dfdfde;
    border-radius: 8px;
    overflow-y: auto;
    max-height: 80vh;
  }
  .toc-nav::-webkit-scrollbar {
    display: none;
  }

  .toc-nav > span.active > a {
    color: #000;
    font-weight: bold;
  }

  .toc-nav > span > a {
    display: block;
    color: inherit;
    line-height: 1.3;
    font-size: 0.9rem;
    padding: 5px 16px;
  }

  .toc-nav > span > a:hover {
    background: #f7f6f3;
  }

  .toc-nav > span > a.indent-1 {
    padding-left: 1.75rem;
  }

  .toc-nav > span > a.indent-2 {
    padding-left: 3.5rem;
  }

  @media (max-width: 800px) {
    .toc-nav {
      display: none;
    }
  }
</style>

<script is:inline>
  const options = {
    rootMargin: "-30% 0px",
  };

  const callback = (entries) => {
    entries.forEach((entry) => {
      const id = entry.target.getAttribute("id");
      if (entry.isIntersecting) {
        document
          .querySelector(`nav span a[href="#${id}"]`)
          .parentElement.classList.add("active");
      } else {
        document
          .querySelector(`nav span a[href="#${id}"]`)
          .parentElement.classList.remove("active");
      }
    });
  };

  window.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(callback, options);

    document.querySelectorAll("a[id]").forEach((elem) => {
      observer.observe(elem);
    });
  });
</script>