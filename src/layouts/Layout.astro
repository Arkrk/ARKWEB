---
import { PUBLIC_GA_TRACKING_ID, ENABLE_LIGHTBOX } from '../server-constants.ts'
import { getDatabase } from '../lib/notion/client.ts'
import { getNavLink, getStaticFilePath, filePath } from '../lib/blog-helpers.ts'
import '../styles/syntax-coloring.css'
import GoogleAnalytics from '../components/GoogleAnalytics.astro'
import Darkmode from '../components/Darkmode.astro'
import SearchModal from '../components/SearchModal.astro'
import SearchButton from '../components/SearchButton.astro'
import BlogButton from '../components/BlogButton.astro'

export interface Props {
  title: string
  description: string
  path: string
  ogImage: string
}

const { title = '', description = '', path = '/', ogImage = '' } = Astro.props

const database = await getDatabase()

const siteTitle = title ? `${title} - ${database.Title}` : database.Title
const siteDescription = description ? description : database.Description
const siteURL = new URL(getNavLink(path), Astro.site).toString()
const siteOGImage = new URL(
  getStaticFilePath('/default-og-image.png'),
  Astro.site
)

let coverImageURL: string
if (database.Cover) {
  if (database.Cover.Type === 'external') {
    coverImageURL = database.Cover.Url
  } else if (database.Cover.Type === 'file') {
    try {
      coverImageURL = filePath(new URL(database.Cover.Url))
    } catch (err) {
      console.log('Invalid DB cover image URL')
    }
  }
}

let customIconURL: string
if (database.Icon && database.Icon.Type === 'file') {
  try {
    customIconURL = filePath(new URL(database.Icon.Url))
  } catch (err) {
    console.log('Invalid DB custom icon URL')
  }
}
---

<!DOCTYPE html>
<html lang="ja" prefix="og: https://ogp.me/ns#">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>
    <meta name="description" content={siteDescription} />
    <link rel="canonical" href={siteURL} />
    <meta property="og:url" content={siteURL} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:site_name" content={database.Title} />
    <meta property="og:image" content={ogImage || siteOGImage} />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={ogImage || siteOGImage} />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
      integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
      crossorigin="anonymous"
    />
    <link rel="icon" href="/favicon.ico" sizes="32x32">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/apple-touch-icon.png"><!-- 180×180 -->
    <link rel="manifest" href="/manifest.webmanifest">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100..900&family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <style>
      body {
        font-family: "Noto Sans", "Noto Sans JP", sans-serif;
      }
    </style>
  </head>
  <body>
    <GoogleAnalytics trackingId={PUBLIC_GA_TRACKING_ID} />
    <div class="container">
      <header class="site-header">
        <h1>
          <a href={getNavLink('/')}>
            {
              database.Icon && database.Icon.Type === 'emoji' ? (
                <>
                  <span>{database.Icon.Emoji}</span>
                </>
              ) : database.Icon && database.Icon.Type === 'external' ? (
                <>
                  <img src={database.Icon.Url} alt="Site icon image" />
                </>
              ) : database.Icon && database.Icon.Type === 'file' ? (
                <>
                  <img
                    src={customIconURL}
                    class="custom-icon"
                    alt="Site icon image"
                  />
                </>
              ) : (
                database.Title
              )
            }
            {
              coverImageURL && (
                  <img class="coversvg" src={coverImageURL} alt="Site cover image" loading="lazy" />
              )
            }
          </a>
        </h1>
        <div class="header_button_wrapper">
          <BlogButton />
          <SearchButton />
          <Darkmode />
        </div>
      </header>

      <main>
        <div class="content">
          <slot name="main" />
        </div>
      </main>

      <footer>
        <div class="copyright">
          <span>© 2024 ARKWEB</span>
        </div>
        <div class="system">
          <span>Built with </span>
          <a href="https://astro.build" target="_blank" rel="noopener noreferrer">Astro</a>
          <br>
          <span>Powered by </span>
          <a href="https://github.com/otoyo/astro-notion-blog" target="_blank" rel="noopener noreferrer">astro-notion-blog</a>
        </div>
      </footer>
    </div>

    <SearchModal />
    {
      ENABLE_LIGHTBOX && (
        <script src={getStaticFilePath('/scripts/fslightbox.js')} />
      )
    }
  </body>
</html>

<style>
  .container {
    min-height: 100vh;
  }

  header {
    position: sticky;
    top: 0;
    left: 0;
    width: 100%;
    display: flex;
    align-items: center;
    background-color: var(--bg);
    padding: 10px 10px;
    z-index:98;
    transition:
      translateY 600ms,
      opacity 200ms;
  }
  @media (max-width: 640px) {
    header {
      padding: 6px 6px;
    }
  }
  header.hide {
    translatey: -100%;
    opacity: 0;
  }

  .wrapper {
    display: flex;
    max-width: 1280px;
  }

  main {
    flex: 1;
    order: 2;
    justify-content: space-between;
  }
  @media (max-width: 640px) {
    main {
      order: 1;
      padding-top: 1.5rem;
    }
  }
  
  @media screen and (max-width: 640px) {
    .wrapper {
      display: block;
    }
    main {
      margin: 0;
    }
  }

  img.custom-icon{
    height: 25px;
    min-width: 0;
    max-height: 1.6em;
  }

  .coversvg {
    height: 25px;
    min-width: 0;
    max-width: 100%;
    max-height: 1.6em;
    object-fit: contain;
  }

  @media (max-width: 640px) {
    img.custom-icon{
      height: 23px;
    }
    .coversvg{
      height: 23px;
    }
  }

  .header_button_wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: auto;
    gap: 4px;
  }

  header > h1 > a {
    display: flex;
    justify-content: center;
    align-items: center;
    max-width: 100%;
    height: fit-content;
    color: inherit;
    width: fit-content;
  }

  header > h1 {
    padding: 5px 0 5px 0;
  }

  div.content {
    padding: 20px 20px;
  }
  @media (max-width: 640px) {
    div.content {
      padding: 0 18px;
    }
  }

  main header {
    padding: 20px 0 20px;
  }
  main header h1 {
    font-weight: 700;
    color: #333;
  }
  main header h1 a {
    display: block;
    color: inherit;
  }
  main header h1 a:hover {
    color: inherit;
  }
  main header h1 a span,
  main header h1 a img {
    display: inline-block;
    font-size: 1.1em;
  }
  main header h1 a span {
    margin-right: 0.3em;
    margin-left: -0.1rem;
  }
  main header h1 a img {
    width: 1.2em;
    height: 1.2em;
    margin-right: 0.2em;
    margin-left: -0.3rem;
    vertical-align: sub;
  }
  main header h1 a img.custom-icon {
    border-radius: var(--radius);
  }

  main header div.description {
    padding: 0.3rem 0 0.6rem;
    font-size: 0.95rem;
  }

  main footer {
    margin: 30px 0 10px;
    text-align: center;
    font-size: 0.75rem;
  }
  @media (max-width: 640px) {
    main footer {
      margin: 0 auto 30px;
    }
  }
  main footer span {
    color: #777;
  }
  main footer a {
    color: inherit;
    text-decoration: underline;
  }
  footer {
    padding: 20px 20px;
  }
  @media (max-width: 640px) {
    footer {
      padding: 20px 18px;
    }
  }
  footer::before {
    content: "";
    display: block;
    height: 1px;
    width: 180px;
    background: #dfdfde;
    margin-bottom: 20px;
  }
  .copyright {
    font-size: 1rem;
  }
  .system, .system a {
    font-size: 0.8rem;
    margin-bottom: 20px;
    color: #a5a4a1;
  }
</style>

<style is:global>
  :root {
    --gap-quarter: 0.25rem;
    --gap-half: 0.5rem;
    --gap: 1rem;
    --gap-double: 2rem;

    --bg: #fff;
    --fg: #333;
    --accents-1: #666;
    --accents-2: #666;
    --accents-3: #d3d1cb;
    --accents-4: #a58452;
    --accents-5: #7e5c29;
    --bg2: #f7f6f3;
    --geist-foreground: #000;
    --geist-success: #690;

    --radius: 4px;

    --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',
      'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',
      'Helvetica Neue', sans-serif;
    --font-mono: SFMono-Regular, Menlo, Consolas, 'PT Mono', 'Liberation Mono',
      Courier, monospace;
  }

  * {
    box-sizing: border-box;
    word-break: break-word;
  }

  *:focus {
  outline: none;
  }

  html,
  body {
    padding: 0;
    margin: 0;
    font-size: 16px;
  }

  body {
    min-height: 100vh;
    max-width: 1000px;
    width: 100%;
    margin: auto;
    overflow-y: scroll;
    background: var(--bg);
    color: var(--fg);
    font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, 'Segoe UI',
      Helvetica, 'Hiragino Sans', 'Hiragino Kaku Gothic ProN',
      'Hiragino Sans GB', メイリオ, Meiryo, 'Apple Color Emoji', Arial,
      sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';

    /*background-image: radial-gradient(#ddd 1px, transparent 1px),
      radial-gradient(#ddd 1px, transparent 1px);*/
    background-position: 0 0, 25px 25px;
    background-attachment: fixed;
    background-size: 50px 50px;

    /* Hack */
    overflow-x: hidden;

    -webkit-font-smoothing: antialiased;
    -webkit-text-size-adjust: 100%;
  }

  figure {
    margin: 0;
    font-size: 0.85rem;
    color: #999;
    line-height: 1.8rem;
  }

  a {
    color: var(--accents-4);
    text-decoration: none;
    -webkit-tap-highlight-color:rgba(0,0,0,0);
  }
  a:hover {
    color: var(--accents-5);
  }

  mark {
    padding: var(--gap-quarter);
    border-radius: var(--radius);
    background: rgba(247, 212, 255, 0.8);
  }

  h1 {
    margin: 0;
    color: var(--fg);
    font-size: 2rem;
    font-weight: 700;
  }

  @media (max-width: 640px) {
    h1 {
      font-size: 1.6rem;
    }
  }

  ol {
    color: #222;
    font-weight: 400;
    font-size: 0.9rem;
    line-height: 1.8rem;
  }
  p,
  ul {
    color: #222;
    font-weight: 400;
    font-size: 1rem;
    line-height: 1.8rem;
  }
  ul,
  ol {
    margin: 0;
    padding-inline-start: 1.5rem;
  }
  pre {
    margin: 0;
    white-space: pre;
    tab-size: 2;
  }
  pre :global(code) {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  hr {
    display: block;
    height: 1px;
    border: 0;
    margin: 0.3rem 0;
    background-color: #333;
  }

  code {
    font-size: 0.9rem;
    background: rgba(135, 131, 120, 0.15);
    color: #eb5757;
    padding: 0.25rem;
    border-radius: var(--radius);
    font-family: var(--font-mono);
  }

  table {
    display: block;
    overflow-x: auto;
    white-space: nowrap;
    border-collapse: collapse;
  }

  table tr {
    vertical-align: top;
  }

  table th {
    font-weight: 600;
    background-color: #f4f4f4;
  }

  table td,
  table th {
    font-size: 0.9rem;
    border: 1px solid #e4e4e4;
    padding: 0.5rem 1rem;
    text-align: left;
    line-height: 1.2rem;
  }
  table td::after {
    content: '';
    display: inline-block;
    min-height: 0.9rem;
  }

  ::-webkit-scrollbar {
  background: var(--bg);
  width:10px;
  }
  ::-webkit-scrollbar-thumb {
  background-color: var(--accents-3);
  border-radius: 20px;
  }
</style>

<script>
    let lastScrollTop = 0;
  function scrollHandler() {
    const header = document.querySelector('header')!;
    const body = document.querySelector('body')!;
    const scrollTop = window.scrollY || document.documentElement.scrollTop;
    if (scrollTop < lastScrollTop) {
      header.classList.remove('hide');
    } else if (window.scrollY > 48 && !body.classList.contains('no-scroll')) {
      header.classList.add('hide');
    }
    lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
  }

  let timeout: NodeJS.Timeout | null = null;
  function throttleScrollHandler() {
    if (timeout) {
      clearTimeout(timeout);
    }
    timeout = setTimeout(() => {
      scrollHandler();
      timeout = null;
    }, 50);
  }

  document.addEventListener('scroll', throttleScrollHandler);
</script>