---
import type { SelectProperty } from '../../../../../lib/interfaces.ts'
import {
  getPostsByTagAndPage,
  getRankedPosts,
  getAllTags,
  getNumberOfPagesByTag,
} from '../../../../../lib/notion/client.ts'
import Layout from '../../../../../layouts/Layout.astro'
import NoContents from '../../../../../components/NoContents.astro'
import PostDate from '../../../../../components/PostDate.astro'
import PostTags from '../../../../../components/PostTags.astro'
import PostTitle from '../../../../../components/PostTitle.astro'
import PostFeaturedImage from '../../../../../components/PostFeaturedImage.astro'
import Pagination from '../../../../../components/Pagination.astro'
import styles from '../../../../../styles/blog.module.css'
import '../../../../../styles/notion-color.css'
import { Icon } from 'astro-icon/components'

export async function getStaticPaths() {
  const allTags = await getAllTags()

  let params = []

  await Promise.all(
    allTags.map((tag: SelectProperty) => {
      return getNumberOfPagesByTag(tag.name).then((numberOfPages: number) => {
        for (let i = 2; i <= numberOfPages; i++) {
          params.push({ params: { tag: tag.name, page: i.toString() } })
        }
      })
    })
  )

  return params
}

const { tag, page } = Astro.params

const [posts, rankedPosts, tags, numberOfPages] = await Promise.all([
  getPostsByTagAndPage(tag, parseInt(page, 10)),
  getRankedPosts(),
  getAllTags(),
  getNumberOfPagesByTag(tag),
])

const currentTag = posts[0].Tags.find((t) => t.name === tag)
---

<Layout
  title={`${tag} の記事一覧 (${page}/${numberOfPages})`}
  path={`/blog/tag/${tag}/page/${page}`}
>
  <div slot="main" class={styles.main}>
    <h2 class="blog-label">ブログ</h2>
    <header>
      <div class="tag-container">
        <Icon name="mingcute:filter-fill" />
        <span class={`tag ${currentTag.color}`}>{tag}</span>
      </div>
    </header>
    
    <div class="card-wrapper">
    {
      posts.length === 0 ? (
        <NoContents contents={posts} />
      ) : (
        posts.map((post) => (
        <div class="grid-parts">
          <div class={styles.post} key={post.Slug}>
            <figure class="grid-image">
              <PostFeaturedImage post={post} />
            </figure>
            <div class="grid-text">
              <PostTitle post={post} />
              <div class="date-area">
                <PostDate post={post} />
              </div>
              <div class="tags-area">
                <Icon name="mingcute:tag-2-fill" />
                <PostTags post={post} />
              </div>
            </div>
          </div>
          </div>
        ))
      )
    }
    </div>

    <footer>
      <Pagination
        tag={tag}
        currentPage={parseInt(page, 10)}
        numberOfPages={numberOfPages}
      />
    </footer>
  </div>
</Layout>

<style>
  .blog-label {
    margin: 0 0 0.3rem;
    font-size: 2.25rem;
    font-weight: 700;
    color: var(--fg);
    line-height: 1.3;
  }
  @media (max-width: 640px) {
    .blog-label {
      font-size: 1.875rem;
    }
  }
  header {
    padding: 0;
  }
  .tag-container {
    display: flex;
    align-items: center;
    padding: 6px 0 16.5px 0;
    line-height: 1.2rem;
    font-size: 1rem;
  }
  .tag-container span.tag {
    border-radius: 8px;
    padding: 7.2px 12px;
    background: rgba(227, 226, 224, 0.5);
  }
  .tag-container svg {
    min-width: 26px;
    min-height: 26px;
    margin-right: 6px;
  }
  .date-area {
    display: flex;
    align-items: center;
    margin-top: 0.8rem;
  }
  .tags-area {
    display: flex;
    align-items: center;
    margin-top: 0.2rem;
  }
  .{styles.main} svg {
    width: 18px;
    height: 18px;
    margin-right: 5px; 
  }
  [data-icon="mingcute:filter-fill"] {
    color: #333333;
  }
  .card-wrapper {
    display: grid;
    grid-template-columns: repeat(3, minmax(0, 1fr));
    column-gap: 15px;
    row-gap: 15px;
    line-height: 32px;
  }
  @media (max-width: 900px) {
    .card-wrapper {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  @media (max-width: 640px) {
    .card-wrapper {
      grid-template-columns: repeat(1, minmax(0, 1fr));
      line-height: 28px;
    }
  }
  .grid-parts {
    border:solid 1px #dfdfde;
    border-radius: 8px;
    overflow: hidden;
  }
  .grid-parts:hover {
    background: #f7f6f3;
  }
  .grid-image {
    overflow: hidden;
  }
  .grid-text {
    padding: 6px 13px 17px;
  }
</style>
