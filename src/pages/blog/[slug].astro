---
import * as interfaces from '../../lib/interfaces.ts'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../lib/notion/client.ts'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '../../lib/blog-helpers.ts'
import Layout from '../../layouts/Layout.astro'
import PostDate from '../../components/PostDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import PostUpdateDate from '../../components/PostUpdateDate.astro'
import ContentList from '../../components/ContentList.astro'
import ShareButtons from '../../components/ShareButtons.astro'
import '../../styles/dialog-toc.css'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error(`Post not found. slug: ${slug}`)
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
    getRankedPosts(),
    getPosts(5),
    getAllTags(),
    getPostsByTag(post.Tags[0]?.name, 6),
  ])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File).File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          url = new URL((block.Image || block.File).File.Url)
        } catch {
          console.log('Invalid file URL: ', (block.Image || block.File)?.File?.Url)
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
}
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
>
  <div slot="main">
    <div>
      <article>
        <PostTitle post={post} enableLink={false} />
        <div class="date-area">
          <PostDate post={post} />
          <PostUpdateDate post={post} />
        </div>
        <div class="tags-area">
          <PostTags post={post} />
        </div>
        <div class="body-area">
          <PostBody blocks={blocks} />
          <ContentList blocks={blocks} />
        </div>
      </article>

      <ShareButtons />
      <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
    </div>

    <button type="button" id="openButton">目次</button>
    <dialog id="modalDialog" class="dialog">
      <div id="dialogInputArea">
        <div id="dialog-container">
          <ContentList blocks={blocks} />
        </div>
      </div>
    </dialog>

  </div>
</Layout>

<style>
  .date-area {
    display: flex;
    align-items: center;
    margin-top: 0.8rem;
  }
  .tags-area {
    display: flex;
    align-items: center;
    margin-top: 0.4rem;
  }
  .tags-area svg {
    width: 18px;
    height: 18px;
    margin-right: 5px; 
  }
  .body-area {
    padding: 3rem 0 5rem;
    border-bottom: var(--border);
  }
  @media (min-width: 801px) {
    .body-area {
      display: flex;
      gap: 60px;
    }
  }
</style>

<script>
  import '../../scripts/dialog.js'
</script>